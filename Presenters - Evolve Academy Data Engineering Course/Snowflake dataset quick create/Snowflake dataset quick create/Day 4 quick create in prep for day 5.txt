
CREATE OR REPLACE TABLE SUPPORTING_DATA.PUBLIC.ENHANCED_DATE_TABLE(
   Id                   INTEGER  NOT NULL PRIMARY KEY
  ,Date                 DATE  NOT NULL
  ,DateLongDescription  VARCHAR(50)  NOT NULL
  ,DateShortDescription VARCHAR(50)  NOT NULL
  ,DayLongName          VARCHAR(9) NOT NULL
  ,DayShortName         VARCHAR(3) NOT NULL
  ,MonthLongName        VARCHAR(9) NOT NULL
  ,MonthShortName       VARCHAR(3) NOT NULL
  ,QuarterLongName      VARCHAR(50)  NOT NULL
  ,QuarterShortName     VARCHAR(2) NOT NULL
  ,IsWeekend            VARCHAR(1)
  ,YearNumber           INT
  ,MonthNumber          INT
  ,DayNumber            INT
  ,PastYear             DATE
  ,WeekNumberOfTheYear  INT
  ,IsFirstDayOfWeek     VARCHAR(1)
  ,NumberOfDaysFromNow  INT
  
);


INSERT INTO SUPPORTING_DATA.PUBLIC.ENHANCED_DATE_TABLE
(
   Id                   
  ,Date                 
  ,DateLongDescription  
  ,DateShortDescription 
  ,DayLongName          
  ,DayShortName         
  ,MonthLongName        
  ,MonthShortName       
  ,QuarterLongName      
  ,QuarterShortName     
  ,IsWeekend            
  ,YearNumber           
  ,MonthNumber          
  ,DayNumber            
  ,PastYear             
  ,WeekNumberOfTheYear  
  ,IsFirstDayOfWeek     
  ,NumberOfDaysFromNow  
)

select 
   Id                   
  ,Date                 
  ,DateLongDescription  
  ,DateShortDescription 
  ,DayLongName          
  ,DayShortName         
  ,MonthLongName        
  ,MonthShortName       
  ,QuarterLongName      
  ,QuarterShortName     
  ,CASE WHEN dayshortname IN ('Sat', 'Sun') THEN 'Y' ELSE 'N' END as IsWeekend            
  ,year(Date) as YearNumber           
  ,month(Date) as MonthNumber          
  ,day(Date) as DayNumber            
  ,dateadd(year,-1,Date) as PastYear             
  ,week(Date) as WeekNumberOfTheYear  
  ,CASE WHEN dayshortname = 'Mon' THEN 'Y' ELSE 'N' END as IsFirstDayOfWeek     
  ,datediff(day, Date, current_timestamp) as NumberOfDaysFromNow  
from SUPPORTING_DATA.PUBLIC.DATE_TABLE;



CREATE OR REPLACE DATABASE DATA_WAREHOUSE;

CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_CUSTOMER_SK START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_LOCATION_SK START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_FRANCHISE_SK START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_MENU_TYPE_SK START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_MENU_ITEM_SK START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_TRUCK_SK START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE DATA_WAREHOUSE.PUBLIC.SEQ_CURRENCY_SK START = 1 INCREMENT = 1;

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_GEOGRAPHY
AS 
SELECT 
l.LOCATION_ID,
l.CITY,
l.REGION,
l.COUNTRY,
c.COUNTRY_POPULATION
FROM HOL_DB.RAW_POS.LOCATION l
LEFT JOIN 
(SELECT 
ISO_COUNTRY,
SUM(CITY_POPULATION) AS COUNTRY_POPULATION
FROM HOL_DB.RAW_POS.COUNTRY
GROUP BY ISO_COUNTRY) c
ON l.ISO_COUNTRY_CODE = c.ISO_COUNTRY;

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_CUSTOMER
AS 
SELECT 
CUSTOMER_ID,
FIRST_NAME,
LAST_NAME,
CONCAT(FIRST_NAME, ' ', LAST_NAME) as FULL_NAME,
GENDER,
BIRTHDAY_DATE,
DATEDIFF(YEAR, BIRTHDAY_DATE, CURRENT_DATE) AS AGE,
E_MAIL,
PHONE_NUMBER
FROM HOL_DB.RAW_CUSTOMER.CUSTOMER_LOYALTY;


CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_FRANCHISE
AS 
SELECT 
FRANCHISE_ID,
FIRST_NAME,
LAST_NAME,
CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME,
MAX(CITY) as CITY,
COUNTRY,
E_MAIL,
PHONE_NUMBER
FROM HOL_DB.RAW_POS.FRANCHISE
GROUP BY 
FRANCHISE_ID,
FIRST_NAME,
LAST_NAME,
COUNTRY,
E_MAIL,
PHONE_NUMBER;


CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_MENU_TYPE
AS 
SELECT DISTINCT
MENU_TYPE_ID,
MENU_TYPE AS MENU_TYPE_NAME
FROM HOL_DB.RAW_POS.MENU;

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_MENU_ITEM
AS 
SELECT DISTINCT
MENU_ITEM_ID,
MENU_ITEM_NAME,
ITEM_CATEGORY,
ITEM_SUBCATEGORY
FROM HOL_DB.RAW_POS.MENU;

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_TRUCK
AS 
SELECT 
t.TRUCK_ID,
t.PRIMARY_CITY,
t.REGION, 
t.COUNTRY,
t.YEAR,
t.MAKE, 
t.MODEL,
m.TRUCK_BRAND_NAME
FROM HOL_DB.RAW_POS.TRUCK t
LEFT JOIN 
(SELECT DISTINCT 
MENU_TYPE_ID, 
TRUCK_BRAND_NAME FROM 
HOL_DB.RAW_POS.MENU) m
on t.MENU_TYPE_ID = m.MENU_TYPE_ID;

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_CURRENCY
AS 
SELECT DISTINCT
ORDER_CURRENCY AS CURRENCY_CODE
FROM HOL_DB.RAW_POS.ORDER_HEADER;

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_DATE
AS 
SELECT 
ID AS DATE_SK,
DATE,
MONTHSHORTNAME AS MONTH_SHORT_NAME,
QUARTERSHORTNAME AS QUARTER_SHORT_NAME,
YEARNUMBER AS YEAR_NUMBER,
MONTHNUMBER AS MONTH_NUMBER,
DAYNUMBER AS DAY_NUMBER,
PASTYEAR AS PAST_YEAR,
WEEKNUMBEROFTHEYEAR AS WEEK_NUMBER_OF_YEAR
FROM SUPPORTING_DATA.PUBLIC.ENHANCED_DATE_TABLE;

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_GEOGRAPHY
(
LOCATION_SK INT,
LOCATION_ID INT,
CITY VARCHAR (256),
REGION VARCHAR(256),
COUNTRY VARCHAR(256),
COUNTRY_POPULATION_SIZE INT
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER
(
CUSTOMER_SK INT,
CUSTOMER_ID INT,
FIRST_NAME VARCHAR (256),
LAST_NAME VARCHAR(256),
FULL_NAME VARCHAR(256),
GENDER VARCHAR(256),
BIRTHDAY_DATE DATE, 
AGE INT,
E_MAIL VARCHAR(256),
PHONE_NUMBER VARCHAR(256),
ACTIVE_FLAG_IND VARCHAR(1),
EFFECTIVE_START_DATE DATE,
EFFECTIVE_END_DATE DATE
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_FRANCHISE
(
FRANCHISE_SK INT,
FRANCHISE_ID INT,
FIRST_NAME VARCHAR(256),
LAST_NAME VARCHAR(256),
FULL_NAME VARCHAR(256),
CITY VARCHAR (256),
COUNTRY VARCHAR(256),
E_MAIL VARCHAR(256),
PHONE_NUMBER VARCHAR(256)
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_MENU_TYPE
(
MENU_TYPE_SK INT,
MENU_TYPE_ID INT,
MENU_TYPE_NAME VARCHAR(256)
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_MENU_ITEM
(
MENU_ITEM_SK INT,
MENU_ITEM_ID INT,
MENU_ITEM_NAME VARCHAR(256),
ITEM_CATEGORY VARCHAR(256),
ITEM_SUB_CATEGORY VARCHAR(256)
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_TRUCK
(
TRUCK_SK INT,
TRUCK_ID INT,
REGION VARCHAR(256),
COUNTRY VARCHAR(256),
YEAR INT,
MAKE VARCHAR(256),
MODEL VARCHAR(256),
TRUCK_BRAND_NAME VARCHAR(256)
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_CURRENCY
(
CURRENCY_SK INT,
CURRENCY_CODE VARCHAR(3)
);

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.DIM_DATE
(
DATE_SK INT,
DATE DATE,
MONTH_SHORT_NAME VARCHAR(256),
QUARTER_SHORT_NAME VARCHAR(256),
YEAR_NUMBER INT,
MONTH_NUMBER INT,
DAY_NUMBER INT,
PAST_YEAR DATE,
WEEK_NUMBER_OF_YEAR INT
);

CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_AGGREGATED_FACT
AS 
SELECT 
    T.TRUCK_SK,
    G.LOCATION_SK, 
    COALESCE(C.CUSTOMER_SK, -1) AS CUSTOMER_SK,
    CUR.CURRENCY_SK,
    D.DATE_SK,
    OH.ORDER_AMOUNT
FROM HOL_DB.RAW_POS.ORDER_HEADER OH
JOIN DATA_WAREHOUSE.PUBLIC.DIM_TRUCK T
ON T.TRUCK_ID = OH.TRUCK_ID
JOIN DATA_WAREHOUSE.PUBLIC.DIM_GEOGRAPHY G
ON G.LOCATION_ID = OH.LOCATION_ID
LEFT JOIN DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER C
ON C.CUSTOMER_ID = OH.CUSTOMER_ID
AND TO_DATE(ORDER_TS) BETWEEN C.EFFECTIVE_START_DATE AND C.EFFECTIVE_END_DATE
JOIN DATA_WAREHOUSE.PUBLIC.DIM_CURRENCY CUR
ON CUR.CURRENCY_CODE = OH.ORDER_CURRENCY
JOIN DATA_WAREHOUSE.PUBLIC.DIM_DATE D
ON D.DATE = TO_DATE(OH.ORDER_TS);


CREATE OR REPLACE VIEW DATA_WAREHOUSE.PUBLIC.VIRTUAL_DETAIL_FACT
AS 
SELECT 
    T.TRUCK_SK,
    G.LOCATION_SK, 
    COALESCE(C.CUSTOMER_SK, -1) AS CUSTOMER_SK,
    CUR.CURRENCY_SK,
    D.DATE_SK,
    M.MENU_ITEM_SK,
    OD.QUANTITY,
    OD.UNIT_PRICE
FROM HOL_DB.RAW_POS.ORDER_HEADER OH
JOIN HOL_DB.RAW_POS.ORDER_DETAIL OD
ON OD.ORDER_ID = OH.ORDER_ID
JOIN DATA_WAREHOUSE.PUBLIC.DIM_TRUCK T
ON T.TRUCK_ID = OH.TRUCK_ID
JOIN DATA_WAREHOUSE.PUBLIC.DIM_GEOGRAPHY G
ON G.LOCATION_ID = OH.LOCATION_ID
LEFT JOIN DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER C
ON C.CUSTOMER_ID = OH.CUSTOMER_ID
AND TO_DATE(OH.ORDER_TS) BETWEEN C.EFFECTIVE_START_DATE AND C.EFFECTIVE_END_DATE
JOIN DATA_WAREHOUSE.PUBLIC.DIM_CURRENCY CUR
ON CUR.CURRENCY_CODE = OH.ORDER_CURRENCY
JOIN DATA_WAREHOUSE.PUBLIC.DIM_DATE D
ON D.DATE = TO_DATE(OH.ORDER_TS)
JOIN DATA_WAREHOUSE.PUBLIC.DIM_MENU_ITEM M
ON OD.MENU_ITEM_ID = M.MENU_ITEM_ID;

CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.FACT_AGGREGATED
(
TRUCK_SK INT,
LOCATION_SK INT,
CUSTOMER_SK INT,
CURRENCY_SK INT,
DATE_SK INT,
ORDER_AMOUNT NUMBER(38,4)
);


CREATE OR REPLACE TABLE DATA_WAREHOUSE.PUBLIC.FACT_DETAIL
(
TRUCK_SK INT,
LOCATION_SK INT,
CUSTOMER_SK INT,
CURRENCY_SK INT,
DATE_SK INT,
MENU_ITEM_SK INT, 
QUANTITY NUMBER(38,4),
UNIT_PRICE NUMBER (38,4)
);



CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_GEOGRAPHY()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_GEOGRAPHY 
USING (
SELECT
LOCATION_ID,
CITY,
REGION,
COUNTRY,
COUNTRY_POPULATION AS COUNTRY_POPULATION_SIZE
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_GEOGRAPHY 
) AS b ON DIM_GEOGRAPHY.LOCATION_ID = b.LOCATION_ID
  WHEN MATCHED THEN UPDATE 
  SET 
  CITY = b.CITY,
  REGION = b.REGION,
  COUNTRY = b.COUNTRY,
  COUNTRY_POPULATION_SIZE = b.COUNTRY_POPULATION_SIZE
  
  WHEN NOT MATCHED THEN 
  INSERT 
  ( LOCATION_SK,
    LOCATION_ID,
    CITY,
    REGION,
    COUNTRY,
    COUNTRY_POPULATION_SIZE
  ) 
   VALUES 
   (SEQ_LOCATION_SK.nextval, 
    b.LOCATION_ID,
    b.CITY,
    b.REGION,
    b.COUNTRY,
    b.COUNTRY_POPULATION_SIZE );

RETURN 'Load is complete';

END;




CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_CUSTOMER()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN

--First take care of the new records that we are seeing for the first time
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER 
USING (
SELECT
CUSTOMER_ID,
FIRST_NAME,
LAST_NAME,
FULL_NAME,
GENDER,
BIRTHDAY_DATE, 
AGE,
E_MAIL,
PHONE_NUMBER
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_CUSTOMER 
) AS b ON DIM_CUSTOMER.CUSTOMER_ID = b.CUSTOMER_ID
  WHEN NOT MATCHED THEN 
  INSERT 
  (CUSTOMER_SK,
   CUSTOMER_ID,
   FIRST_NAME,
   LAST_NAME,
   FULL_NAME,
   GENDER,
   BIRTHDAY_DATE, 
   AGE,
   E_MAIL,
   PHONE_NUMBER,
   ACTIVE_FLAG_IND,
   EFFECTIVE_START_DATE,
   EFFECTIVE_END_DATE) 
   VALUES 
   (SEQ_CUSTOMER_SK.nextval, 
    b.CUSTOMER_ID, 
    b.FIRST_NAME,
    b.LAST_NAME,
    b.FULL_NAME,
    b.GENDER,
    b.BIRTHDAY_DATE, 
    b.AGE,
    b.E_MAIL,
    b.PHONE_NUMBER,
    'Y',
    '1900-01-01',
    '9999-12-31');

-- Now lets handle the updates, because we are treating this as a type 2, we want to ensure we can flag changed records. The code below will allow us to
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER 
USING (SELECT
p.CUSTOMER_SK,
v.CUSTOMER_ID,
v.FIRST_NAME,
v.LAST_NAME,
v.FULL_NAME,
v.GENDER,
v.BIRTHDAY_DATE, 
v.AGE,
v.E_MAIL,
v.PHONE_NUMBER,
p.ACTIVE_FLAG_IND,
p.EFFECTIVE_START_DATE,
p.EFFECTIVE_END_DATE
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_CUSTOMER v
JOIN DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER p
ON p.CUSTOMER_ID = v.CUSTOMER_ID
AND p.ACTIVE_FLAG_IND = 'Y'
AND (
        COALESCE(v.FIRST_NAME, '-1') != COALESCE(p.FIRST_NAME, '-1') OR
        COALESCE(v.LAST_NAME, '-1') != COALESCE(p.LAST_NAME, '-1') OR
        COALESCE(v.FULL_NAME, '-1') != COALESCE(p.FULL_NAME, '-1') OR
        COALESCE(v.GENDER, '-1') != COALESCE(p.GENDER, '-1') OR
        COALESCE(v.BIRTHDAY_DATE, '1900-01-01') != COALESCE(p.BIRTHDAY_DATE, '1900-01-01') OR 
        COALESCE(v.AGE, '0') != COALESCE(p.AGE, '0') OR
        COALESCE(v.E_MAIL, '-1') != COALESCE(p.E_MAIL, '-1') OR
        COALESCE(v.PHONE_NUMBER, '-1') != COALESCE(p.PHONE_NUMBER, '-1')
    )
) c
ON 
        COALESCE(DIM_CUSTOMER.FIRST_NAME, '-1') = COALESCE(c.FIRST_NAME, '-1') AND
        COALESCE(DIM_CUSTOMER.LAST_NAME, '-1') = COALESCE(c.LAST_NAME, '-1') AND
        COALESCE(DIM_CUSTOMER.FULL_NAME, '-1') = COALESCE(c.FULL_NAME, '-1') AND
        COALESCE(DIM_CUSTOMER.GENDER, '-1') = COALESCE(c.GENDER, '-1') AND
        COALESCE(DIM_CUSTOMER.BIRTHDAY_DATE, '1900-01-01') = COALESCE(c.BIRTHDAY_DATE, '1900-01-01') AND 
        COALESCE(DIM_CUSTOMER.AGE, '0') = COALESCE(c.AGE, '0') AND
        COALESCE(DIM_CUSTOMER.E_MAIL, '-1') = COALESCE(c.E_MAIL, '-1') AND
        COALESCE(DIM_CUSTOMER.PHONE_NUMBER, '-1') = COALESCE(c.PHONE_NUMBER, '-1')
WHEN NOT MATCHED THEN
INSERT
(
   CUSTOMER_SK,
   CUSTOMER_ID,
   FIRST_NAME,
   LAST_NAME,
   FULL_NAME,
   GENDER,
   BIRTHDAY_DATE, 
   AGE,
   E_MAIL,
   PHONE_NUMBER,
   ACTIVE_FLAG_IND,
   EFFECTIVE_START_DATE,
   EFFECTIVE_END_DATE
)
VALUES 
(
    SEQ_CUSTOMER_SK.nextval, 
    c.CUSTOMER_ID,
    c.FIRST_NAME,
    c.LAST_NAME,
    c.FULL_NAME,
    c.GENDER,
    c.BIRTHDAY_DATE, 
    c.AGE,
    c.E_MAIL,
    c.PHONE_NUMBER,
    'Y',
    CURRENT_DATE,
    '9999-12-31'
);


--Now lets deactivate the old records
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER p
USING DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_CUSTOMER v
ON p.CUSTOMER_ID = v.CUSTOMER_ID
AND 
(
        COALESCE(v.FIRST_NAME, '-1') != COALESCE(p.FIRST_NAME, '-1') OR
        COALESCE(v.LAST_NAME, '-1') != COALESCE(p.LAST_NAME, '-1') OR
        COALESCE(v.FULL_NAME, '-1') != COALESCE(p.FULL_NAME, '-1') OR
        COALESCE(v.GENDER, '-1') != COALESCE(p.GENDER, '-1') OR
        COALESCE(v.BIRTHDAY_DATE, '1900-01-01') != COALESCE(p.BIRTHDAY_DATE, '1900-01-01') OR 
        COALESCE(v.AGE, '0') != COALESCE(p.AGE, '0') OR
        COALESCE(v.E_MAIL, '-1') != COALESCE(p.E_MAIL, '-1') OR
        COALESCE(v.PHONE_NUMBER, '-1') != COALESCE(p.PHONE_NUMBER, '-1')
)
AND p.EFFECTIVE_END_DATE = '9999-12-31'
WHEN MATCHED THEN UPDATE
SET p.EFFECTIVE_END_DATE = DATEADD(day, -1, CURRENT_DATE),
p.ACTIVE_FLAG_IND = 'N';


--Handling of the ghost records
INSERT INTO DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER
(
   CUSTOMER_SK,
   CUSTOMER_ID,
   FIRST_NAME,
   LAST_NAME,
   FULL_NAME,
   GENDER,
   BIRTHDAY_DATE, 
   AGE,
   E_MAIL,
   PHONE_NUMBER,
   ACTIVE_FLAG_IND,
   EFFECTIVE_START_DATE,
   EFFECTIVE_END_DATE
)

select
    -1             AS CUSTOMER_SK,
    '-1'           AS CUSTOMER_ID,
    'UNASSIGNED'   AS FIRST_NAME,
    'UNASSIGNED'   AS LAST_NAME,
    'UNASSIGNED'   AS FULL_NAME,
    'UNASSIGNED'   AS GENDER,
    '1900-01-01'   AS BIRTHDAY_DATE, 
    0              AS AGE,
    'UNASSIGNED'   AS E_MAIL,
    'UNASSIGNED'   AS PHONE_NUMBER,
    'Y'            AS ACTIVE_FLAG_IND,
    '1900-01-01'   AS EFFECTIVE_START_DATE,
    '9999-12-31'   AS EFFECTIVE_END_DATE
WHERE NOT EXISTS 
(
      SELECT 1 FROM DATA_WAREHOUSE.PUBLIC.DIM_CUSTOMER
      WHERE customer_sk = -1
);

RETURN 'Load is complete';

END;


CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_FRANCHISE()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_FRANCHISE
USING (
SELECT
FRANCHISE_ID,
FIRST_NAME,
LAST_NAME,
FULL_NAME,
CITY,
COUNTRY,
E_MAIL,
PHONE_NUMBER
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_FRANCHISE 
) AS b ON DIM_FRANCHISE.FRANCHISE_ID = b.FRANCHISE_ID
  WHEN MATCHED THEN UPDATE 
  SET 
  FIRST_NAME = b.FIRST_NAME,
  LAST_NAME = b.LAST_NAME,
  FULL_NAME = b.FULL_NAME,
  CITY = b.CITY,
  COUNTRY = b.COUNTRY,
  E_MAIL = b.E_MAIL,
  PHONE_NUMBER = b.PHONE_NUMBER
  
  WHEN NOT MATCHED THEN 
  INSERT 
  ( FRANCHISE_SK,
    FRANCHISE_ID,
    FIRST_NAME,
    LAST_NAME,
    FULL_NAME,
    CITY,
    COUNTRY,
    E_MAIL,
    PHONE_NUMBER
  ) 
   VALUES 
   (SEQ_FRANCHISE_SK.nextval, 
    b.FRANCHISE_ID,
    b.FIRST_NAME,
    b.LAST_NAME,
    b.FULL_NAME,
    b.CITY,
    b.COUNTRY,
    b.E_MAIL,
    b.PHONE_NUMBER );

RETURN 'Load is complete';

END;

CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_MENU_TYPE()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_MENU_TYPE
USING (
SELECT
MENU_TYPE_ID,
MENU_TYPE_NAME
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_MENU_TYPE
) AS b ON DIM_MENU_TYPE.MENU_TYPE_ID = b.MENU_TYPE_ID
  WHEN MATCHED THEN UPDATE 
  SET 
  MENU_TYPE_NAME = b.MENU_TYPE_NAME
  
  WHEN NOT MATCHED THEN 
  INSERT 
  ( MENU_TYPE_SK,
    MENU_TYPE_ID,
    MENU_TYPE_NAME
  ) 
   VALUES 
   (SEQ_MENU_TYPE_SK.nextval, 
    b.MENU_TYPE_ID,
    b.MENU_TYPE_NAME);

RETURN 'Load is complete';

END;

CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_MENU_ITEM()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_MENU_ITEM
USING (
SELECT
MENU_ITEM_ID,
MENU_ITEM_NAME,
ITEM_CATEGORY,
ITEM_SUBCATEGORY AS ITEM_SUB_CATEGORY
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_MENU_ITEM
) AS b ON DIM_MENU_ITEM.MENU_ITEM_ID = b.MENU_ITEM_ID
  WHEN MATCHED THEN UPDATE 
  SET 
  MENU_ITEM_NAME = b.MENU_ITEM_NAME,
  ITEM_CATEGORY = b.ITEM_CATEGORY,
  ITEM_SUB_CATEGORY = b.ITEM_SUB_CATEGORY
  
  WHEN NOT MATCHED THEN 
  INSERT 
  ( MENU_ITEM_SK,
    MENU_ITEM_ID,
    MENU_ITEM_NAME,
    ITEM_CATEGORY,
    ITEM_SUB_CATEGORY
  ) 
   VALUES 
   (SEQ_MENU_ITEM_SK.nextval, 
    b.MENU_ITEM_ID,
    b.MENU_ITEM_NAME,
    b.ITEM_CATEGORY,
    b.ITEM_SUB_CATEGORY);

RETURN 'Load is complete';

END;

CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_TRUCK()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_TRUCK
USING (
SELECT
TRUCK_ID,
REGION,
COUNTRY,
YEAR,
MAKE,
MODEL,
TRUCK_BRAND_NAME
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_TRUCK
) AS b ON DIM_TRUCK.TRUCK_ID = b.TRUCK_ID
  WHEN MATCHED THEN UPDATE 
  SET 
    REGION = b.REGION,
    COUNTRY = b.COUNTRY,
    YEAR = b.YEAR,
    MAKE = b.MAKE,
    MODEL = b.MODEL,
    TRUCK_BRAND_NAME = b. TRUCK_BRAND_NAME
  
  WHEN NOT MATCHED THEN 
  INSERT 
  ( TRUCK_SK,
    TRUCK_ID,
    REGION,
    COUNTRY,
    YEAR,
    MAKE,
    MODEL,
    TRUCK_BRAND_NAME
  ) 
   VALUES 
   (SEQ_TRUCK_SK.nextval, 
    b.TRUCK_ID,
    b.REGION,
    b.COUNTRY,
    b.YEAR,
    b.MAKE,
    b.MODEL,
    b.TRUCK_BRAND_NAME);

RETURN 'Load is complete';

END;


CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_CURRENCY()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

BEGIN
MERGE INTO DATA_WAREHOUSE.PUBLIC.DIM_CURRENCY
USING (
SELECT
CURRENCY_CODE
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_CURRENCY
) AS b ON DIM_CURRENCY.CURRENCY_CODE = b.CURRENCY_CODE
WHEN NOT MATCHED THEN 
  INSERT 
  ( CURRENCY_SK,
    CURRENCY_CODE
  ) 
   VALUES 
   (SEQ_CURRENCY_SK.nextval, 
    b.CURRENCY_CODE);

RETURN 'Load is complete';

END;



CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DIM_DATE()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS
BEGIN


TRUNCATE TABLE DATA_WAREHOUSE.PUBLIC.DIM_DATE;

  INSERT INTO DATA_WAREHOUSE.PUBLIC.DIM_DATE
(
    DATE_SK,
    DATE,
    MONTH_SHORT_NAME,
    QUARTER_SHORT_NAME,
    YEAR_NUMBER,
    MONTH_NUMBER,
    DAY_NUMBER,
    PAST_YEAR,
    WEEK_NUMBER_OF_YEAR  
)

select 
    DATE_SK,
    DATE,
    MONTH_SHORT_NAME,
    QUARTER_SHORT_NAME,
    YEAR_NUMBER,
    MONTH_NUMBER,
    DAY_NUMBER,
    PAST_YEAR,
    WEEK_NUMBER_OF_YEAR
from DATA_WAREHOUSE.PUBLIC.VIRTUAL_DIM_DATE;

RETURN 'Load is complete';
END;

CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_AGGREGATED_FACT(START_DATE DATE DEFAULT NULL, END_DATE DATE DEFAULT NULL)
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

--Declaring variables
DECLARE     V_START_SK INT;
            V_END_SK INT;
            
BEGIN
--Setting the dates to the SK variables
 V_START_SK := TO_NUMBER(REPLACE(TO_CHAR(START_DATE), '-', ''));
 V_END_SK := TO_NUMBER(REPLACE(TO_CHAR(END_DATE), '-', ''));

--Performing the delete
DELETE FROM DATA_WAREHOUSE.PUBLIC.FACT_AGGREGATED
WHERE DATE_SK BETWEEN :V_START_SK AND :V_END_SK;

--Performing the insert
INSERT INTO DATA_WAREHOUSE.PUBLIC.FACT_AGGREGATED
(TRUCK_SK,
LOCATION_SK,
CUSTOMER_SK,
CURRENCY_SK,
DATE_SK,
ORDER_AMOUNT)
SELECT 
TRUCK_SK,
LOCATION_SK,
CUSTOMER_SK,
CURRENCY_SK,
DATE_SK,
ORDER_AMOUNT
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_AGGREGATED_FACT
WHERE DATE_SK BETWEEN :V_START_SK AND :V_END_SK;

RETURN 'Load is complete';

END;

CREATE OR REPLACE PROCEDURE DATA_WAREHOUSE.PUBLIC.LOAD_DETAIL_FACT(START_DATE DATE DEFAULT NULL, END_DATE DATE DEFAULT NULL)
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS

--Declaring variables
DECLARE     V_START_SK INT;
            V_END_SK INT;
            
BEGIN
--Setting the dates to the SK variables
 V_START_SK := TO_NUMBER(REPLACE(TO_CHAR(START_DATE), '-', ''));
 V_END_SK := TO_NUMBER(REPLACE(TO_CHAR(END_DATE), '-', ''));

--Performing the delete
DELETE FROM DATA_WAREHOUSE.PUBLIC.FACT_DETAIL
WHERE DATE_SK BETWEEN :V_START_SK AND :V_END_SK;

--Performing the insert
INSERT INTO DATA_WAREHOUSE.PUBLIC.FACT_DETAIL
(TRUCK_SK,
LOCATION_SK,
CUSTOMER_SK,
CURRENCY_SK,
DATE_SK,
MENU_ITEM_SK,
QUANTITY,
UNIT_PRICE)
SELECT 
TRUCK_SK,
LOCATION_SK,
CUSTOMER_SK,
CURRENCY_SK,
DATE_SK,
MENU_ITEM_SK,
QUANTITY,
UNIT_PRICE
FROM DATA_WAREHOUSE.PUBLIC.VIRTUAL_DETAIL_FACT
WHERE DATE_SK BETWEEN :V_START_SK AND :V_END_SK;

RETURN 'Load is complete';

END;

-- FULL LOAD
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_GEOGRAPHY();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_CUSTOMER();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_FRANCHISE();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_MENU_TYPE();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_MENU_ITEM();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_TRUCK();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_CURRENCY();
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DIM_DATE();

CALL DATA_WAREHOUSE.PUBLIC.LOAD_AGGREGATED_FACT('2018-01-01', '2023-12-31');
CALL DATA_WAREHOUSE.PUBLIC.LOAD_DETAIL_FACT('2018-01-01', '2023-12-31');


