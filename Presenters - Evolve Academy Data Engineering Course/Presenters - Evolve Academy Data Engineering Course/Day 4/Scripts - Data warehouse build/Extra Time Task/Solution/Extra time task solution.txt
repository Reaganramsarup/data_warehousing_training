WITH BASE_SET AS (
SELECT
L_PARTKEY AS PART, 
DATEADD(YEAR, 24, L_RECEIPTDATE) AS VALUE_DATE,
L_EXTENDEDPRICE AS PRICE
FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM
WHERE L_PARTKEY IN (479745, 12222279, 5855783)
ORDER BY PART, VALUE_DATE
), 

DISTINCT_KEYS AS (
SELECT DISTINCT PART FROM BASE_SET
),

EXPLODED_SET AS (
SELECT A.PART, B.DATE AS VALUE_DATE FROM DISTINCT_KEYS A
JOIN DATA_WAREHOUSE.PUBLIC.DIM_DATE B -- This causes the explosion, it is called a cross join
),

COMBINED_PRICE_SET AS (
SELECT A.PART, A.VALUE_DATE, B.PRICE FROM EXPLODED_SET A
LEFT JOIN BASE_SET B
ON A.PART = B.PART
AND A.VALUE_DATE = B.VALUE_DATE
),
FINAL_SET AS (
SELECT 
PART,
VALUE_DATE,
CASE WHEN PRICE IS NULL 
THEN LAG(PRICE) IGNORE NULLS OVER (PARTITION BY PART ORDER BY VALUE_DATE ASC)
ELSE PRICE END AS PRICE --This can also be done with a coalesce around the lag
FROM COMBINED_PRICE_SET
ORDER BY PART, VALUE_DATE)

SELECT * FROM FINAL_SET
WHERE PRICE IS NOT NULL -- This will allow us to filter out all the records that occur before we first saw that part. 
